name: kdl-py Release

on:
  push:
    branches:
      - "*"
    paths:
      - "kdl-py/**/*"
      - ".github/workflows/kdl-py*"
jobs:
  # lint-project-operator-dockerfile:
  #   name: Linter
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Extract branch name
  #     shell: bash
  #     run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  #     id: extract_branch
  #   - name: Lint the Dockerfile
  #     uses: luke142367/Docker-Lint-Action@v1.0.0
  #     with:
  #       target: docker-images//Dockerfile
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # dockerfile-vuln-scan:
  #   name: Vulnerability Scan
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Build an image from Dockerfile
  #       run: |
  #         docker build -t konstellation/my-app:v0.14.0--alpha.4  ${{ github.sha }} docker-images//Dockerfile
  #     - name: Aqua Security Trivy
  #       uses: aquasecurity/trivy-action@0.0.20
  #       with:
  #         scan-type: 'image'
  #         image-ref: 'konstellation/my-app:${{ github.sha }} docker-images//Dockerfile'
  #         exit-code: 0
  #         ignore-unfixed: false
  #         vuln-type: 'os,library'
  #         severity: 'HIGH,CRITICAL'
  #         format: 'template'
  #         template: '@/contrib/sarif.tpl'
  #         output: vuln-scan-report.sarif
  #         cache-dir: .trivycache/
  #         hide-progress: true
  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v1
  #       with:
  #         sarif_file: 'vuln-scan-report.sarif'

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Install dependencies
        working-directory: ./kdl-py
        run: npm install

      - name: Create empty release_version file
        working-directory: ./kdl-py
        run: touch release_version.txt

      - name: Release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.PATNAME }}
        working-directory: ./kdl-py
        run: npx semantic-release --debug

      - name: Upload release_version
        uses: actions/upload-artifact@v2
        with:
          name: release_version
          path: kdl-py/release_version.txt

  docker:
    # TODO: use output from previous job adding an if condiction instead one per step
    # https://lannonbr.com/blog/2020-04-16-gh-actions-job-outputs
    name: Docker
    runs-on: ubuntu-latest
    needs: semantic-release
    steps:

      - name: Download release_version
        uses: actions/download-artifact@v2
        with:
          name: release_version
          path: kdl-py

      - name: Read release_version
        id: release_version
        # Set RELEASE_VERSION environment variable
        run: |
          echo "RELEASE_VERSION=$(cat kdl-py/release_version.txt)" >> $GITHUB_ENV
          if [ "$RELEASE_VERSION" = "" ]; then
            echo "::warning::No new version to release."
          fi
      - name: Checkout code
        if: env.RELEASE_VERSION != ''
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        if: env.RELEASE_VERSION != ''
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        if: env.RELEASE_VERSION != ''
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub Registry
        if: env.RELEASE_VERSION != ''
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push to Docker Hub
        if: env.RELEASE_VERSION != ''
        uses: docker/build-push-action@v2
        with:
          context: ./kdl-py
          file: ./kdl-py/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            konstellation/kdl-py:${{ env.RELEASE_VERSION }}
            konstellation/kdl-py:latest

      - name: Upload README to Docker Hub
        if: env.RELEASE_VERSION != ''
        uses: ms-jpq/sync-dockerhub-readme@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: konstellation/kdl-py
          readme: "./kdl-py/README.md"
